export const dynamic = 'force-dynamic';
export const revalidate = 0;
export const fetchCache = 'force-no-store';
export const runtime = 'nodejs';
// src/app/admin/partidas/time-campeao-do-dia/page.tsx
"use client";

import Head from "next/head";
import { useState } from "react";
import TabelaConfrontos from "@/components/admin/TabelaConfrontos";
import ModalEditarPartida from "@/components/admin/ModalEditarPartida";
import BannerUpload from "@/components/admin/BannerUpload";
import CardsDestaquesDiaV2 from "@/components/admin/CardsDestaquesDiaV2";
import ModalRegrasDestaques from "@/components/admin/ModalRegrasDestaques";
import { mockTimes, mockConfrontos } from "@/mocks/admin/mockDia";
import type { Confronto } from "@/mocks/admin/mockDia";

type EditPartidaState = { index: number; tipo: "ida" | "volta" } | null;

export default function TimeCampeaoDoDiaPage() {
  const [confrontos, setConfrontos] = useState<Confronto[]>(mockConfrontos.map((c) => ({ ...c })));
  const [partidaSelecionada, setPartidaSelecionada] = useState<EditPartidaState>(null);
  const [bannerUrl, setBannerUrl] = useState<string | null>(null);
  const [showModalRegras, setShowModalRegras] = useState(false);

  function handleSalvarResultado(
    index: number,
    tipo: "ida" | "volta",
    placar: { a: number; b: number },
    eventos: any[]
  ) {
    setConfrontos((prev) =>
      prev.map((c, idx) => {
        if (idx !== index) return c;
        if (tipo === "ida") return { ...c, resultadoIda: { placar, eventos } };
        return { ...c, resultadoVolta: { placar, eventos } };
      })
    );
    setPartidaSelecionada(null);
  }

  return (
    <>
      <Head>
        <title>Time Campeão do Dia | Painel Admin - Fut7Pro</title>
        <meta
          name="description"
          content="Lance os resultados do dia e selecione os destaques e o time campeão. Controle completo e rápido via painel administrativo Fut7Pro."
        />
        <meta
          name="keywords"
          content="racha, fut7, time campeão do dia, destaques, painel admin, futebol entre amigos"
        />
      </Head>

      <main className="pt-20 pb-24 md:pt-6 md:pb-8 px-4 min-h-screen bg-zinc-900 flex flex-col items-center">
        <h1 className="text-3xl md:text-4xl font-bold text-yellow-400 mb-3 text-center drop-shadow">
          Lançamento de Resultados do Dia
        </h1>
        <p className="text-gray-300 mb-8 text-center text-lg">
          Clique em uma partida na tabela abaixo para lançar resultados, gols e assistências.
          <br />
          Tudo prático, rápido e sem enrolação.
        </p>

        <TabelaConfrontos
          confrontos={confrontos}
          onSelecionarPartida={(index, tipo) => setPartidaSelecionada({ index, tipo })}
        />

        {partidaSelecionada && (
          <ModalEditarPartida
            index={partidaSelecionada.index}
            confronto={confrontos[partidaSelecionada.index]}
            tipo={partidaSelecionada.tipo}
            times={mockTimes}
            onClose={() => setPartidaSelecionada(null)}
            onSalvar={handleSalvarResultado}
          />
        )}

        <div className="w-full flex flex-col items-center mt-10 mb-3">
          <h2 className="text-2xl font-extrabold text-yellow-400 mb-1">Destaques do Dia</h2>
          <button
            className="text-sm underline text-yellow-300 hover:text-yellow-500 mb-2 transition"
            onClick={() => setShowModalRegras(true)}
            tabIndex={0}
          >
            clique aqui e saiba as regras
          </button>
        </div>

        {showModalRegras && <ModalRegrasDestaques onClose={() => setShowModalRegras(false)} />}

        <div className="w-full flex flex-col items-center gap-12 mt-4 max-w-5xl">
          <CardsDestaquesDiaV2 confrontos={confrontos} times={mockTimes} />

          <BannerUpload bannerUrl={bannerUrl} setBannerUrl={setBannerUrl} timeCampeao={null} />
        </div>
      </main>
    </>
  );
}

